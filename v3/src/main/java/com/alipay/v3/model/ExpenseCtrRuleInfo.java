/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-04-27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * ExpenseCtrRuleInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExpenseCtrRuleInfo {
  public static final String SERIALIZED_NAME_RULE_FACTOR = "rule_factor";
  @SerializedName(SERIALIZED_NAME_RULE_FACTOR)
  private String ruleFactor;

  public static final String SERIALIZED_NAME_RULE_ID = "rule_id";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_RULE_NAME = "rule_name";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_RULE_OPERATOR = "rule_operator";
  @SerializedName(SERIALIZED_NAME_RULE_OPERATOR)
  private String ruleOperator;

  public static final String SERIALIZED_NAME_RULE_VALUE = "rule_value";
  @SerializedName(SERIALIZED_NAME_RULE_VALUE)
  private String ruleValue;

  public ExpenseCtrRuleInfo() { 
  }

  public ExpenseCtrRuleInfo ruleFactor(String ruleFactor) {
    
    this.ruleFactor = ruleFactor;
    return this;
  }

   /**
   * 费控维度 枚举值： QUOTA_DAY（日额度）， QUOTA_MONTH（月额度），QUOTA_TOTAL（有效期总额度），QUOTA_ONCE（单次额度）， ALARM_CLOCK_TIME（时间段）， CARD_TYPE（地铁卡类型）， MEAL_MERCHANT（商户）， MCC（商户类型）， DISTRICT（区域）
   * @return ruleFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "费控维度 枚举值： QUOTA_DAY（日额度）， QUOTA_MONTH（月额度），QUOTA_TOTAL（有效期总额度），QUOTA_ONCE（单次额度）， ALARM_CLOCK_TIME（时间段）， CARD_TYPE（地铁卡类型）， MEAL_MERCHANT（商户）， MCC（商户类型）， DISTRICT（区域）")

  public String getRuleFactor() {
    return ruleFactor;
  }


  public void setRuleFactor(String ruleFactor) {
    this.ruleFactor = ruleFactor;
  }


  public ExpenseCtrRuleInfo ruleId(String ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * 费控条件ID 特殊说明：创建时由支付宝生成，无需外部传入
   * @return ruleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "费控条件ID 特殊说明：创建时由支付宝生成，无需外部传入")

  public String getRuleId() {
    return ruleId;
  }


  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public ExpenseCtrRuleInfo ruleName(String ruleName) {
    
    this.ruleName = ruleName;
    return this;
  }

   /**
   * 费控条件名称 约束：敏感词校验
   * @return ruleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "费控条件名称 约束：敏感词校验")

  public String getRuleName() {
    return ruleName;
  }


  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public ExpenseCtrRuleInfo ruleOperator(String ruleOperator) {
    
    this.ruleOperator = ruleOperator;
    return this;
  }

   /**
   * 费控条件操作符 枚举值： LT(\&quot;&lt;\&quot;,\&quot;小于\&quot;) LE(\&quot;&lt;&#x3D;\&quot;,\&quot;小于等于\&quot;) EQ(\&quot;&#x3D;\&quot;,\&quot;等于\&quot;) NE(\&quot;!&#x3D;\&quot;,\&quot;不等于\&quot;) GE(\&quot;&gt;&#x3D;\&quot;,\&quot;大于等于\&quot;) GT(\&quot;&gt;\&quot;,\&quot;大于\&quot;)
   * @return ruleOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "费控条件操作符 枚举值： LT(\"<\",\"小于\") LE(\"<=\",\"小于等于\") EQ(\"=\",\"等于\") NE(\"!=\",\"不等于\") GE(\">=\",\"大于等于\") GT(\">\",\"大于\")")

  public String getRuleOperator() {
    return ruleOperator;
  }


  public void setRuleOperator(String ruleOperator) {
    this.ruleOperator = ruleOperator;
  }


  public ExpenseCtrRuleInfo ruleValue(String ruleValue) {
    
    this.ruleValue = ruleValue;
    return this;
  }

   /**
   * 费控条件值 约束： 1）金额值以（元）为单位的数值，可以精确到小数点后两位。如费控维度：日额度（QUOTA_DAY）、月额度（QUOTA_MONTH）、有效期总额度（QUOTA_TOTAL）、单次额度（QUOTA_ONCE）对应的条件值；  2）时间段（ALARM_CLOCK_TIME）条件值按如下格式传入： 格式1：星期几格式（custom），节点支持monday/tuesday/wednesday/thursday/friday/saturday/sunday格式如下： {  \&quot;custom\&quot;: {   \&quot;monday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;],    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ],   \&quot;sunday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ]  } } 格式2：工作日/节假日模式（regular），节点支持workday/holiday两种，格式如下： {  \&quot;regular\&quot;: {   \&quot;workday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ],   \&quot;holiday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ]  } } 格式3：不限 {  \&quot;all\&quot;: true } 三种格式仅能选其一；  3）费控维度商户（MEAL_MERCHANT）和商户类型（MCC）条件值 MEAL_MERCHANT分为商户ID和门店ID两级，一个商户ID可对应多个门店ID； MCC分为一级MCC和二级MCC两级，一个一级MCC可对应多个二级MCC； 两者的格式均为： {  \&quot;一级ID1\&quot;: [\&quot;二级ID1\&quot;, \&quot;二级ID2\&quot;]，         \&quot;一级ID2\&quot;: [\&quot;二级ID3\&quot;, \&quot;二级ID4\&quot;]， } 特别：若二级ID不限，可以设置为-1  4）区域（DISTRICT）和地铁卡类型（CARD_TYPE）条件值 格式均为数组： [\&quot;ID1\&quot;, \&quot;ID2\&quot;]
   * @return ruleValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "费控条件值 约束： 1）金额值以（元）为单位的数值，可以精确到小数点后两位。如费控维度：日额度（QUOTA_DAY）、月额度（QUOTA_MONTH）、有效期总额度（QUOTA_TOTAL）、单次额度（QUOTA_ONCE）对应的条件值；  2）时间段（ALARM_CLOCK_TIME）条件值按如下格式传入： 格式1：星期几格式（custom），节点支持monday/tuesday/wednesday/thursday/friday/saturday/sunday格式如下： {  \"custom\": {   \"monday\": [    [\"12:00\", \"13:30\"],    [\"12:00\", \"13:30\"]   ],   \"sunday\": [    [\"12:00\", \"13:30\"]   ]  } } 格式2：工作日/节假日模式（regular），节点支持workday/holiday两种，格式如下： {  \"regular\": {   \"workday\": [    [\"20:59\", \"22:01\"]   ],   \"holiday\": [    [\"20:59\", \"22:01\"]   ]  } } 格式3：不限 {  \"all\": true } 三种格式仅能选其一；  3）费控维度商户（MEAL_MERCHANT）和商户类型（MCC）条件值 MEAL_MERCHANT分为商户ID和门店ID两级，一个商户ID可对应多个门店ID； MCC分为一级MCC和二级MCC两级，一个一级MCC可对应多个二级MCC； 两者的格式均为： {  \"一级ID1\": [\"二级ID1\", \"二级ID2\"]，         \"一级ID2\": [\"二级ID3\", \"二级ID4\"]， } 特别：若二级ID不限，可以设置为-1  4）区域（DISTRICT）和地铁卡类型（CARD_TYPE）条件值 格式均为数组： [\"ID1\", \"ID2\"]")

  public String getRuleValue() {
    return ruleValue;
  }


  public void setRuleValue(String ruleValue) {
    this.ruleValue = ruleValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseCtrRuleInfo expenseCtrRuleInfo = (ExpenseCtrRuleInfo) o;
    return Objects.equals(this.ruleFactor, expenseCtrRuleInfo.ruleFactor) &&
        Objects.equals(this.ruleId, expenseCtrRuleInfo.ruleId) &&
        Objects.equals(this.ruleName, expenseCtrRuleInfo.ruleName) &&
        Objects.equals(this.ruleOperator, expenseCtrRuleInfo.ruleOperator) &&
        Objects.equals(this.ruleValue, expenseCtrRuleInfo.ruleValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ruleFactor, ruleId, ruleName, ruleOperator, ruleValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseCtrRuleInfo {\n");
    sb.append("    ruleFactor: ").append(toIndentedString(ruleFactor)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    ruleOperator: ").append(toIndentedString(ruleOperator)).append("\n");
    sb.append("    ruleValue: ").append(toIndentedString(ruleValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rule_factor");
    openapiFields.add("rule_id");
    openapiFields.add("rule_name");
    openapiFields.add("rule_operator");
    openapiFields.add("rule_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpenseCtrRuleInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ExpenseCtrRuleInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseCtrRuleInfo is not found in the empty JSON string", ExpenseCtrRuleInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExpenseCtrRuleInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpenseCtrRuleInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("rule_factor") != null && !jsonObj.get("rule_factor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_factor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_factor").toString()));
      }
      if (jsonObj.get("rule_id") != null && !jsonObj.get("rule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_id").toString()));
      }
      if (jsonObj.get("rule_name") != null && !jsonObj.get("rule_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_name").toString()));
      }
      if (jsonObj.get("rule_operator") != null && !jsonObj.get("rule_operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_operator").toString()));
      }
      if (jsonObj.get("rule_value") != null && !jsonObj.get("rule_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseCtrRuleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseCtrRuleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseCtrRuleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseCtrRuleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseCtrRuleInfo>() {
           @Override
           public void write(JsonWriter out, ExpenseCtrRuleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseCtrRuleInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpenseCtrRuleInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpenseCtrRuleInfo
  * @throws IOException if the JSON string is invalid with respect to ExpenseCtrRuleInfo
  */
  public static ExpenseCtrRuleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseCtrRuleInfo.class);
  }

 /**
  * Convert an instance of ExpenseCtrRuleInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

